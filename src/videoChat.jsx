import React, { useEffect, useRef, useState, useCallback } from 'react';
import { Box, Button, HStack, Text, Center } from '@chakra-ui/react';

const VideoChat = ({ isVideoMuted = false, socket, roomId, user }) => {
Â  const localVideoRef = useRef(null);
Â  const remoteVideoRef = useRef(null);
Â  const peerConnectionRef = useRef(null);
Â  const localStreamRef = useRef(null);

Â  const [isVideoStarted, setIsVideoStarted] = useState(false);
Â  const [loading, setLoading] = useState(false);

Â  const stopVideoChat = useCallback(() => {
Â  Â  setIsVideoStarted(false);

Â  Â  if (peerConnectionRef.current) {
Â  Â  Â  peerConnectionRef.current.close();
Â  Â  Â  peerConnectionRef.current = null;
Â  Â  }

Â  Â  if (localStreamRef.current) {
Â  Â  Â  localStreamRef.current.getTracks().forEach(track => track.stop());
Â  Â  Â  localStreamRef.current = null;
Â  Â  }

Â  Â  if (localVideoRef.current) {
Â  Â  Â  localVideoRef.current.srcObject = null;
Â  Â  }

Â  Â  if (remoteVideoRef.current) {
Â  Â  Â  remoteVideoRef.current.srcObject = null;
Â  Â  }

Â  Â  if (socket) {
Â  Â  Â  socket.off('video-answer');
Â  Â  Â  socket.off('video-offer');
Â  Â  Â  socket.off('ice-candidate');
Â  Â  Â  socket.off('ready-for-call');
Â  Â  }
Â  }, [socket]);

Â  const startVideoChat = useCallback(
Â  Â  async (isInitiator = false) => {
Â  Â  Â  if (!socket || isVideoStarted || peerConnectionRef.current) return;

Â  Â  Â  setIsVideoStarted(true);
Â  Â  Â  setLoading(true);

Â  Â  Â  try {
Â  Â  Â  Â  const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
Â  Â  Â  Â  localStreamRef.current = stream;
Â  Â  Â  Â  if (localVideoRef.current) {
Â  Â  Â  Â  Â  localVideoRef.current.srcObject = stream;
Â  Â  Â  Â  }

Â  Â  Â  Â  const pc = new RTCPeerConnection();
Â  Â  Â  Â  peerConnectionRef.current = pc;

Â  Â  Â  Â  stream.getTracks().forEach(track => pc.addTrack(track, stream));

Â  Â  Â  Â  pc.ontrack = (event) => {
Â  Â  Â  Â  Â  if (remoteVideoRef.current) {
Â  Â  Â  Â  Â  Â  remoteVideoRef.current.srcObject = event.streams[0];
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  };

Â  Â  Â  Â  pc.onicecandidate = (e) => {
Â  Â  Â  Â  Â  if (e.candidate) {
Â  Â  Â  Â  Â  Â  socket.emit('ice-candidate', { roomId, candidate: e.candidate });
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  };

Â  Â  Â  Â  if (isInitiator) {
Â  Â  Â  Â  Â  const offer = await pc.createOffer();
Â  Â  Â  Â  Â  await pc.setLocalDescription(offer);
Â  Â  Â  Â  Â  socket.emit('video-offer', { roomId, offer });
Â  Â  Â  Â  }
Â  Â  Â  } catch (err) {
Â  Â  Â  Â  console.error("Error starting video:", err);
Â  Â  Â  Â  stopVideoChat();
Â  Â  Â  } finally {
Â  Â  Â  Â  setLoading(false);
Â  Â  Â  }
Â  Â  },
Â  Â  [socket, roomId, isVideoStarted, stopVideoChat]
Â  );

Â  // ðŸ”„ Handle signaling events
Â  useEffect(() => {
Â  Â  if (!socket) return;

Â  Â  const handleVideoOffer = async ({ offer }) => {
Â  Â  Â  let pc = peerConnectionRef.current;

Â  Â  Â  if (!pc || pc.signalingState === "closed") {
Â  Â  Â  Â  pc = new RTCPeerConnection();
Â  Â  Â  Â  peerConnectionRef.current = pc;

Â  Â  Â  Â  localStreamRef.current?.getTracks().forEach(track => {
Â  Â  Â  Â  Â  pc.addTrack(track, localStreamRef.current);
Â  Â  Â  Â  });

Â  Â  Â  Â  pc.ontrack = (event) => {
Â  Â  Â  Â  Â  if (remoteVideoRef.current) {
Â  Â  Â  Â  Â  Â  remoteVideoRef.current.srcObject = event.streams[0];
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  };

Â  Â  Â  Â  pc.onicecandidate = (e) => {
Â  Â  Â  Â  Â  if (e.candidate) {
Â  Â  Â  Â  Â  Â  socket.emit("ice-candidate", { roomId, candidate: e.candidate });
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  };
Â  Â  Â  }

Â  Â  Â  console.log("ðŸ“¨ Received video offer");
Â  Â  Â  await pc.setRemoteDescription(new RTCSessionDescription(offer));
Â  Â  Â  const answer = await pc.createAnswer();
Â  Â  Â  await pc.setLocalDescription(answer);
Â  Â  Â  socket.emit("video-answer", { roomId, answer });
Â  Â  };

Â  Â  const handleVideoAnswer = async ({ answer }) => {
Â  Â  Â  const pc = peerConnectionRef.current;
Â  Â  Â  if (!pc || pc.signalingState === 'closed') return;
Â  Â  Â  await pc.setRemoteDescription(new RTCSessionDescription(answer));
Â  Â  };

Â  Â  const handleCandidate = async ({ candidate }) => {
Â  Â  Â  const pc = peerConnectionRef.current;
Â  Â  Â  if (!pc || pc.signalingState === 'closed') return;
Â  Â  Â  try {
Â  Â  Â  Â  await pc.addIceCandidate(new RTCIceCandidate(candidate));
Â  Â  Â  } catch (e) {
Â  Â  Â  Â  console.warn("ICE error:", e.message);
Â  Â  Â  }
Â  Â  };

Â  Â  const handleReady = () => {
Â  Â  Â  if (!isVideoStarted) {
Â  Â  Â  Â  console.log("ðŸŸ¢ Received ready-for-call, starting as initiator");
Â  Â  Â  Â  startVideoChat(true);
Â  Â  Â  }
Â  Â  };

Â  Â  socket.on("video-offer", handleVideoOffer);
Â  Â  socket.on("video-answer", handleVideoAnswer);
Â  Â  socket.on("ice-candidate", handleCandidate);
Â  Â  socket.on("ready-for-call", handleReady);

Â  Â  // Notify others you are ready
Â  Â  socket.emit("ready-for-call", { roomId });

Â  Â  return () => {
Â  Â  Â  socket.off("video-offer", handleVideoOffer);
Â  Â  Â  socket.off("video-answer", handleVideoAnswer);
Â  Â  Â  socket.off("ice-candidate", handleCandidate);
Â  Â  Â  socket.off("ready-for-call", handleReady);
Â  Â  };
Â  }, [socket, roomId, startVideoChat, isVideoStarted]);

Â  // ðŸŽ¥ Mute/unmute local video
Â  useEffect(() => {
Â  Â  if (localVideoRef.current?.srcObject) {
Â  Â  Â  const videoTrack = localVideoRef.current.srcObject.getVideoTracks()[0];
Â  Â  Â  if (videoTrack) videoTrack.enabled = !isVideoMuted;
Â  Â  }
Â  }, [isVideoMuted]);

Â  return (
Â  Â  <Box
Â  Â  Â  p={3}
Â  Â  Â  bg="gray.800"
Â  Â  Â  borderRadius="md"
Â  Â  Â  mb={4}
Â  Â  Â  minH="280px"
Â  Â  Â  transition="all 0.3s ease"
Â  Â  >
Â  Â  Â  <Text fontSize="md" fontWeight="bold" color="white" mb={2}>
Â  Â  Â  Â  ðŸŽ¥ Video Chat - {user?.displayName}
Â  Â  Â  </Text>

Â  Â  Â  <HStack spacing={4} align="start" justify="center">
Â  Â  Â  Â  <video
Â  Â  Â  Â  Â  ref={localVideoRef}
Â  Â  Â  Â  Â  autoPlay
Â  Â  Â  Â  Â  muted
Â  Â  Â  Â  Â  playsInline
Â  Â  Â  Â  Â  style={{ width: '250px', borderRadius: '8px', background: '#000' }}
Â  Â  Â  Â  />
Â  Â  Â  Â  <video
Â  Â  Â  Â  Â  ref={remoteVideoRef}
Â  Â  Â  Â  Â  autoPlay
Â  Â  Â  Â  Â  playsInline
Â  Â  Â  Â  Â  style={{ width: '250px', borderRadius: '8px', background: '#000' }}
Â  Â  Â  Â  />
Â  Â  Â  </HStack>

Â  Â  Â  <Center>
Â  Â  Â  Â  <Button
Â  Â  Â  Â  Â  mt={3}
Â  Â  Â  Â  Â  size="sm"
Â  Â  Â  Â  Â  colorScheme="red"
Â  Â  Â  Â  Â  onClick={stopVideoChat}
Â  Â  Â  Â  Â  isDisabled={!isVideoStarted || loading}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  ðŸ›‘ Stop Video
Â  Â  Â  Â  </Button>
Â  Â  Â  </Center>
Â  Â  </Box>
Â  );
};

export default VideoChat;
